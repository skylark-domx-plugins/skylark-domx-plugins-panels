{"version":3,"sources":["Accordion.js"],"names":["define","langx","$","elmx","plugins","panels","Panel","Accordion","Plugin","inherit","klassName","pluginName","options","panel","selector","template","_construct","elm","this","overrided","_velm","forEach","panelEl","group","push","_panels","get","addPanel","remove","expand","expandAll","collapse","collapseAll","active","toggle","register"],"mappings":";;;;;;;AAACA,QACC,sBACA,qBACA,oBACA,uBACA,WACA,WACA,SAASC,EAAMC,EAAEC,EAAKC,EAAQC,EAAOC,GAErC,IAAIC,EAAYH,EAAQI,OAAOC,SAC7BC,UAAY,YAEZC,WAAa,wBAEbC,SACEC,OACEC,SAAW,WACXC,SAAW,OAIdC,WAAa,SAASC,EAAIL,GACzBM,KAAKC,UAAUF,EAAIL,GACnBM,KAAKE,MAAQF,KAAKf,OAClB,IAAIE,KACJa,KAAKE,MAAMlB,EAAEgB,KAAKN,QAAQC,MAAMC,UAAUO,QAASC,IACjD,IAAIT,EAAQ,IAAIN,EAAUD,MAAMgB,GAC9BC,MAAQL,OAEVb,EAAOmB,KAAKX,KAEdK,KAAKO,QAAUpB,GAGjBA,QACEqB,IAAM,cAMRC,SAAW,aAUXC,OAAS,aAUTC,OAAS,aAWTC,UAAY,aAWZC,SAAW,aAUXC,YAAc,eAiChB,OA5BAzB,EAAUD,MAAQA,EAAMG,SACtBC,UAAY,iBAEZmB,OAAS,WACHX,KAAKN,QAAQW,MAAMU,QACrBf,KAAKN,QAAQW,MAAMU,OAAOF,WAE5Bb,KAAKC,YACLD,KAAKN,QAAQW,MAAMU,OAASf,MAG9Ba,SAAW,WACTb,KAAKC,YACLD,KAAKN,QAAQW,MAAMU,OAAS,MAG9BC,OAAS,WACPhB,KAAKC,aAGPS,OAAS,WACPV,KAAKC,eAKTf,EAAQ+B,SAAS5B,GAEVF,EAAOE,UAAYA","file":"../Accordion.js","sourcesContent":[" define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-query\",\n  \"skylark-domx-velm\",\n  \"skylark-domx-plugins\",\n  \"./panels\",\n  \"./Panel\"\n],function(langx,$,elmx,plugins,panels,Panel){\n\n  var Accordion = plugins.Plugin.inherit({\n    klassName : \"Accordion\",\n\n    pluginName : \"domx.panels.accordion\",\n\n    options : {\n      panel: {\n        selector : \"> .panel\",\n        template : null,\n      }\n    },\n\n     _construct : function(elm,options) {\n      this.overrided(elm,options);\n      this._velm = this.elmx();\n      var panels = [];\n      this._velm.$(this.options.panel.selector).forEach((panelEl) => {\n        var panel = new Accordion.Panel(panelEl,{\n          group : this\n        });\n        panels.push(panel);\n      });\n      this._panels = panels;\n    },\n\n    panels : {\n      get : function() {\n\n      }\n    },\n\n\n    addPanel : function() {\n\n    },\n\n    /**\n     * Removes a group pane.\n     *\n     * @method remove\n     * @return {Accordion} The current widget.\n     */\n    remove : function() {\n\n    },\n\n    /**\n     * Expands a group pane.\n     *\n     * @method remove\n     * @return {Accordion} The current widget.\n     */\n    expand : function() {\n      // expand a panel\n\n    },\n\n    /**\n     * Expands all group panes.\n     *\n     * @method expandAll\n     * @return {Accordion} The current widget.\n     */\n    expandAll : function() {\n      // expand a panel\n\n    },\n\n    /**\n     * Collapse a group pane.\n     *\n     * @method collapse\n     * @return {Accordion} The current widget.\n     */\n    collapse : function() {\n\n    },\n\n    /**\n     * Collapses all group pane.\n     *\n     * @method collapseAll\n     * @return {Accordion} The current widget.\n     */\n    collapseAll : function() {\n\n    }\n  });\n\n  Accordion.Panel = Panel.inherit({\n    klassName : \"AccordionPanel\",\n\n    expand : function() {\n      if (this.options.group.active) {\n        this.options.group.active.collapse();\n      }\n      this.overrided();\n      this.options.group.active = this;\n    },\n\n    collapse : function() {\n      this.overrided();\n      this.options.group.active = null;\n    },\n\n    toggle : function() {\n      this.overrided();\n    },\n\n    remove : function() {\n      this.overrided();\n    }\n\n  });\n\n  plugins.register(Accordion);\n\n  return panels.Accordion = Accordion;\n});\n"]}