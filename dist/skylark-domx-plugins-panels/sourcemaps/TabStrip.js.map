{"version":3,"sources":["TabStrip.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","Dropdown","TabButton","panels","TabStrip","Plugin","inherit","klassName","pluginName","options","selectors","header","tab","content","tabpane","droptabs","dropdown","dropdownMenu","dropdownTabs","dropdownCaret","visibleTabs","auto","pullDropdownRight","_construct","elm","this","overrided","_velm","elmx","$header","$tabs","find","$content","$tabpanes","plugin","prototype","self","each","idx","tabEl","target","arrange","dropdownTabsSelector","visibleTabsSelector","$container","dropdownLabel","clone","remove","addClass","$dropdownTabs","$visibleTabs","tempElem","hiddenElementWidth","availableSpace","outerWidth","visibleTabsWidth","index","parseInt","x","get","reverse","hasClass","prependTo","first","appendTo","css","is","detach","insertAfter","length","hide","show","add","register"],"mappings":"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","file":"../TabStrip.js","sourcesContent":["define([\n    \"skylark-langx/langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-eventer\",\n    \"skylark-domx-noder\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-query\",\n    \"skylark-domx-plugins\",\n    \"skylark-domx-plugins-popups/Dropdown\",\n    \"skylark-domx-plugins-toggles/TabButton\",\n    \"./panels\",\n], function(langx, browser, eventer, noder, geom,  $, plugins,Dropdown, TabButton,panels) {\n\n    var TabStrip = plugins.Plugin.inherit({\n        klassName : \"TabStrip\",\n        pluginName : \"domx.panels.tabstrip\",\n\n        options : {\n          selectors : {\n            header : \".nav-tabs\",\n            tab : \"[data-toggle=\\\"tab\\\"]\",\n            content : \".tab-content\",\n            tabpane : \".tab-pane\"\n          },\n\n          droptabs : {\n            selectors : {\n              dropdown : \"li.droptabs\",\n              dropdownMenu    : \"ul.dropdown-menu\",\n              dropdownTabs    : \"li\",\n              dropdownCaret   : \"b.caret\",\n              visibleTabs     : \">li:not(.dropdown)\",\n            },\n            auto              : true,\n            pullDropdownRight : true,\n\n\n          }\n        },\n\n     _construct : function(elm,options) {\n          this.overrided(elm,options);\n          this._velm = this.elmx();\n          this.$header = this._velm.$(this.options.selectors.header); \n          this.$tabs = this.$header.find(this.options.selectors.tab);\n          this.$content = this._velm.$(this.options.selectors.content);\n          this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\n\n          this.$header.find('[data-toggle=\"dropdown\"]').plugin(Dropdown.prototype.pluginName);\n\n          var self = this;\n          this.$tabs.each(function(idx,tabEl){\n            $(tabEl).plugin(TabButton.prototype.pluginName, {\n              target : self.$tabpanes[idx]\n            });\n          });\n\n        },\n\n        arrange : function () {\n\n          var dropdownTabsSelector = this.options.droptabs.selectors.dropdownTabs,\n              visibleTabsSelector = this.options.droptabs.selectors.visibleTabs;\n\n              $container = this.$header;\n          var dropdown = $container.find(this.options.droptabs.selectors.dropdown);\n          var dropdownMenu = dropdown.find(this.options.droptabs.selectors.dropdownMenu);\n          var dropdownLabel = $('>a', dropdown).clone();\n          var dropdownCaret = $(this.options.droptabs.selectors.dropdownCaret, dropdown);\n\n          // We only want the default label, strip the caret out\n          $(this.options.droptabs.selectors.dropdownCaret, dropdownLabel).remove();\n\n          if (this.options.droptabs.pullDropdownRight) {\n            $(dropdown).addClass('pull-right');\n          }\n\n          var $dropdownTabs = function () {\n            return $(dropdownTabsSelector, dropdownMenu);\n          }\n\n          var $visibleTabs = function () {\n            return $(visibleTabsSelector, $container);\n          }\n\n          function getFirstHiddenElementWidth() {\n            var tempElem=$dropdownTabs().first().clone().appendTo($container).css(\"position\",\"fixed\");\n            var hiddenElementWidth = $(tempElem).outerWidth();\n            $(tempElem).remove();\n            return hiddenElementWidth;\n          }\n\n          function getHiddenElementWidth(elem) {\n            var tempElem=$(elem).clone().appendTo($container).css(\"position\",\"fixed\");\n            var hiddenElementWidth = $(tempElem).outerWidth();\n            $(tempElem).remove();\n            return hiddenElementWidth;\n          }\n\n          function getDropdownLabel() {\n            var labelText = 'Dropdown';\n            if ($(dropdown).hasClass('active')) {\n              labelText = $('>li.active>a', dropdownMenu).html();\n            } else if (dropdownLabel.html().length > 0) {\n              labelText = dropdownLabel.html();\n            }\n\n            labelText = $.trim(labelText);\n\n            if (labelText.length > 10) {\n              labelText = labelText.substring(0, 10) + '...';\n            }\n\n            return labelText;\n          }\n\n          function renderDropdownLabel() {\n            $('>a', dropdown).html(getDropdownLabel() + ' ' + dropdownCaret.prop('outerHTML'));\n          }\n\n          function manageActive(elem) {\n            //fixes a bug where Bootstrap can't remove the 'active' class on elements after they've been hidden inside the dropdown\n            $('a', $(elem)).on('show.bs.tab', function (e) {\n              $(e.relatedTarget).parent().removeClass('active');\n            })\n            $('a', $(elem)).on('shown.bs.tab', function (e) {\n              renderDropdownLabel();\n            })\n\n          }\n\n          function checkDropdownSelection() {\n            if ($($dropdownTabs()).filter('.active').length > 0) {\n              $(dropdown).addClass('active');\n            } else {\n              $(dropdown).removeClass('active');\n            }\n\n            renderDropdownLabel();\n          }\n\n\n          var visibleTabsWidth = function () {\n            var visibleTabsWidth = 0;\n            $($visibleTabs()).each(function( index ) {\n              visibleTabsWidth += parseInt($(this).outerWidth(), 10);\n            });\n            visibleTabsWidth = visibleTabsWidth + parseInt($(dropdown).outerWidth(), 10);\n            return visibleTabsWidth;\n          }\n\n          var availableSpace = function () {\n            return $container.outerWidth()-visibleTabsWidth();\n          }\n\n          if (availableSpace()<0) {//we will hide tabs here\n            var x = availableSpace();\n            $($visibleTabs().get().reverse()).each(function( index ){\n              if (!($(this).hasClass('always-visible'))){\n                  $(this).prependTo(dropdownMenu);\n                  x=x+$(this).outerWidth();\n              }\n              if (x>=0) {return false;}\n            });\n          }\n\n          if (availableSpace()>getFirstHiddenElementWidth()) { //and here we bring the tabs out\n            var x = availableSpace();\n            $($dropdownTabs()).each(function( index ){\n              if (getHiddenElementWidth(this) < x && !($(this).hasClass('always-dropdown'))){\n                $(this).appendTo($container);\n                x = x-$(this).outerWidth();\n              } else {return false;}\n             });\n\n            if (!this.options.droptabs.pullDropdownRight && !$(dropdown).is(':last-child')) {\n              // If not pulling-right, keep the dropdown at the end of the container.\n              $(dropdown).detach().insertAfter($container.find('li:last-child'));\n            }\n          }\n\n          if ($dropdownTabs().length <= 0) {\n            dropdown.hide();\n          } else {\n            dropdown.show();\n          }\n        },\n\n        add : function() {\n          //TODO\n        },\n\n        remove : function(){\n          //TODO\n        }\n    });\n\n    plugins.register(TabStrip);\n\n\n    return panels.TabStrip = TabStrip;\n\n});"]}