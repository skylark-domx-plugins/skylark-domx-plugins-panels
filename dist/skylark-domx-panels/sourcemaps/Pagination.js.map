{"version":3,"sources":["Pagination.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","panels","Pagination","Plugin","inherit","klassName","pluginName","options","tagName","css","selectors","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","state","Number","_construct","elm","this","overrided","_velm","elmx","$first","$prev","$last","$next","$numeric","self","checkCanAction","$elm","is","click","ret","numeric","find","text","pageNo","parseInt","_currentPage","_totalPages","_refresh","updates","totalPageNoBtns","Math","min","begin","end","count","size","visibles","i","filter","removeClass","$btn","eq","show","addClass","hide","changePageNoBtns","changeLabeldBtns","v","undefined","register"],"mappings":"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","file":"../Pagination.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./panels\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,panels){\r\n\r\n  'use strict';\r\n\r\n  var Pagination = plugins.Plugin.inherit({\r\n      klassName : \"Pagination\",\r\n\r\n      pluginName : \"domx.pagination\",\r\n\r\n      options : {\r\n          tagName : \"ul\",\r\n          css : \"\",\r\n          selectors : {\r\n              firstNavi : \"li[aria-label='first']\",\r\n              prevNavi : \"li[aria-label='prev']\",\r\n              nextNavi : \"li[aria-label='next']\",\r\n              lastNavi : \"li[aria-label='last']\",\r\n              numericNavi : \"li:not([aria-label])\",\r\n              numericTxt  : \"a\"\r\n          },\r\n          totalPages: 7,\r\n          maxButtonsVisible: 5,\r\n          currentPage: 1     \r\n      },\r\n\r\n      state : {\r\n          totalPages : Number,\r\n          currentPage : Number\r\n      },\r\n\r\n      _construct : function(elm,options) {\r\n        this.overrided(elm,options);\r\n        this._velm = this.elmx();\r\n\r\n        this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n        this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n        this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n        this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n        this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n        var self = this;\r\n\r\n        function checkCanAction(elm) {\r\n          var $elm = $(elm);\r\n          if ($elm.is(\".disabled,.active\")) {\r\n            return false;\r\n          } else {\r\n            return $elm;\r\n          }\r\n        }\r\n\r\n        this.$first.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(1);\r\n        });\r\n\r\n        this.$prev.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.currentPage()-1);\r\n        });\r\n\r\n        this.$last.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.totalPages());\r\n        });\r\n\r\n        this.$next.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.currentPage()+1);\r\n        });\r\n\r\n        this.$numeric.click(function(){\r\n          var ret = checkCanAction(this)\r\n          if (!ret) {\r\n            return;\r\n          }\r\n          var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n              pageNo = parseInt(numeric);\r\n          self.currentPage(pageNo);\r\n\r\n        });\r\n\r\n        this._currentPage = this.options.currentPage;\r\n        this._totalPages = this.options.totalPages;\r\n\r\n        this._refresh({\r\n          currentPage : true,\r\n          totalPages : true\r\n        });\r\n      },\r\n\r\n      _refresh: function (updates) {\r\n        var self = this;\r\n\r\n        function changePageNoBtns(currentPage,totalPages) {\r\n\r\n          // Create the numeric buttons.\r\n          // Variable of number control in the buttons.\r\n          var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n          var begin = 1;\r\n          var end = begin + totalPageNoBtns - 1;\r\n\r\n          /*\r\n           * Align the values in the begin and end variables if the user has the\r\n           * possibility that select a page that doens't appear in the paginador.\r\n           * e.g currentPage = 1, and user go to the 20 page.\r\n           */\r\n          while ((currentPage < begin) || (currentPage > end)) {\r\n            if (currentPage > end) {\r\n               begin += totalPageNoBtns;\r\n               end += totalPageNoBtns;\r\n\r\n               if (end > totalPages) {\r\n                 begin = begin - (end - totalPages);\r\n                 end = totalPages;\r\n               }\r\n             } else {\r\n               begin -= totalPageNoBtns;\r\n               end -= totalPageNoBtns;\r\n\r\n               if (begin < 0) {\r\n                 end = end + (begin + totalPageNoBtns);\r\n                 begin = 1;\r\n               }\r\n             }\r\n          }\r\n         /*\r\n          * Verify if the user clicks in the last page show by paginator.\r\n          * If yes, the paginator advances.\r\n          */\r\n          if ((currentPage === end) && (totalPages != 1)) {\r\n            begin = currentPage - 1;\r\n            end = begin + totalPageNoBtns - 1;\r\n\r\n            if (end >= totalPages) {\r\n              begin = begin - (end - (totalPages));\r\n              end = totalPages;\r\n            }\r\n          }\r\n\r\n          /*\r\n           * Verify it the user clicks in the first page show by paginator.\r\n           * If yes, the paginator retrogress\r\n           */\r\n           if ((begin === currentPage) && (totalPages != 1)) {\r\n             if (currentPage != 1) {\r\n               end = currentPage + 1;\r\n               begin = end - (totalPageNoBtns - 1);\r\n             }\r\n           }\r\n\r\n           var count = self.$numeric.size(),\r\n               visibles = end-begin + 1,\r\n               i = 0;\r\n\r\n           self.$numeric.filter(\".active\").removeClass(\"active\");\r\n           while (i<visibles) {\r\n             var pageNo = i + begin,\r\n                 $btn = self.$numeric.eq(i);\r\n             $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n             if (pageNo == currentPage) {\r\n              $btn.addClass(\"active\");\r\n             }\r\n             i++;\r\n           }\r\n           while (i<count) {\r\n             self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n             i++;\r\n           }\r\n\r\n\r\n        }\r\n\r\n        function changeLabeldBtns(currentPage,totalPages) {\r\n          if (currentPage < 1) {\r\n            throw('Page can\\'t be less than 1');\r\n          } else if (currentPage > totalPages) {\r\n            throw('Page is bigger than total pages');\r\n          }\r\n\r\n          if (totalPages < 1) {\r\n            throw('Total Pages can\\'t be less than 1');\r\n          }\r\n\r\n          if (currentPage == 1 ) {\r\n            self.$first.addClass(\"disabled\");\r\n            self.$prev.addClass(\"disabled\");\r\n          } else {\r\n            self.$first.removeClass(\"disabled\");\r\n            self.$prev.removeClass(\"disabled\");\r\n          }\r\n\r\n          if (currentPage == totalPages ) {\r\n            self.$last.addClass(\"disabled\");\r\n            self.$next.addClass(\"disabled\");\r\n          } else {\r\n            self.$last.removeClass(\"disabled\");\r\n            self.$next.removeClass(\"disabled\");\r\n          }\r\n        }\r\n\r\n        if (updates.currentPage || updates.totalPages) {\r\n          var currentPage = self.currentPage(),\r\n              totalPages = self.totalPages();\r\n\r\n          changePageNoBtns(currentPage,totalPages);\r\n          changeLabeldBtns(currentPage,totalPages);\r\n        }\r\n\r\n      },\r\n\r\n      currentPage : function(v) {\r\n        if (v !== undefined) {\r\n          this._currentPage = v;\r\n          this._refresh({\r\n            currentPage : true\r\n          });            \r\n          return this;\r\n        } else {\r\n          return this._currentPage;\r\n        }\r\n      },\r\n\r\n      totalPages : function(v) {\r\n        if (v !== undefined) {\r\n          this._totalPages = v;\r\n          this._refresh({\r\n            totalPages : true\r\n          });\r\n          return this;\r\n        } else {\r\n          return this._totalPages;\r\n        }\r\n      }\r\n  });\r\n\r\n  plugins.register(Pagination);\r\n\r\n\r\n  return panels.Pagination = Pagination;\r\n});"]}