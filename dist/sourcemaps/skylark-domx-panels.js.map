{"version":3,"sources":["skylark-domx-panels.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","panels","CONST","BACKSPACE_KEYCODE","COMMA_KEYCODE","DELETE_KEYCODE","DOWN_ARROW_KEYCODE","ENTER_KEYCODE","TAB_KEYCODE","UP_ARROW_KEYCODE","isKey","keyCode","e","isBackspaceKey","isDeleteKey","isTabKey","isUpArrow","isDownArrow","ENCODED_REGEX","mixin","cleanInput","questionableMarkup","test","html","text","isShiftHeld","shiftKey","attach","plugins","Panel","Plugin","inherit","klassName","pluginName","options","toggle","_construct","elm","this","overrided","$element","transitioning","dimension","hasWidth","hasClass","show","startEvent","create","trigger","isDefaultPrevented","removeClass","addClass","attr","complete","support","transition","call","scrollSize","camelCase","join","one","proxy","emulateTransitionEnd","TRANSITION_DURATION","hide","offsetHeight","register","HeaderPanel","toggler","selector","body","_velm","elmx","_expanded","$toggle","find","$body","on","expand","emit","plugin","prototype","collapse","full","unfull","toogleFull","close","Pagination","tagName","css","selectors","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","state","Number","$first","$prev","$last","$next","$numeric","self","checkCanAction","$elm","is","click","ret","numeric","pageNo","parseInt","_currentPage","_totalPages","_refresh","updates","totalPageNoBtns","Math","min","begin","end","count","size","visibles","i","filter","$btn","eq","changePageNoBtns","changeLabeldBtns","v","undefined","PanelGroup","panel","template","forEach","panelEl","group","push","_panels","get","addPanel","remove","expandAll","collapseAll","active","Dropdown","TabButton","TabStrip","header","tab","content","tabpane","droptabs","dropdown","dropdownMenu","dropdownTabs","dropdownCaret","visibleTabs","auto","pullDropdownRight","$header","$tabs","$content","$tabpanes","each","idx","tabEl","target","arrange","dropdownTabsSelector","visibleTabsSelector","$container","dropdownLabel","clone","$dropdownTabs","$visibleTabs","tempElem","hiddenElementWidth","availableSpace","outerWidth","visibleTabsWidth","index","x","reverse","prependTo","first","appendTo","detach","insertAfter","length","add","Wizard","disablePreviousStep","selectedItem","step","currentStep","numSteps","$prevBtn","$nextBtn","kids","children","nextText","trim","append","steps","window","console","warn","previous","next","stepclicked","destroy","outerHTML","addSteps","l","$pane","$startPane","$startStep","$step","items","slice","arguments","$steps","$stepContent","Array","label","badge","pane","before","syncSteps","setState","removeSteps","howMany","$start","action","prev","item","canMovePrev","isFirstStep","isLastStep","last","lastText","prevSelector","$prevSteps","currentSelector","$currentStep","totalWidth","containerWidth","width","newMargin","position","left","initialized","li","currentTarget","evt","isNaN","direction","firstFormField","focus","retVal","stepname","main"],"mappings":"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","file":"../skylark-domx-panels.js","sourcesContent":["define('skylark-domx-panels/panels',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\tvar panels = {};\r\n\r\n\tvar CONST = {\r\n\t\tBACKSPACE_KEYCODE: 8,\r\n\t\tCOMMA_KEYCODE: 188, // `,` & `<`\r\n\t\tDELETE_KEYCODE: 46,\r\n\t\tDOWN_ARROW_KEYCODE: 40,\r\n\t\tENTER_KEYCODE: 13,\r\n\t\tTAB_KEYCODE: 9,\r\n\t\tUP_ARROW_KEYCODE: 38\r\n\t};\r\n\r\n\tvar isShiftHeld = function isShiftHeld (e) { return e.shiftKey === true; };\r\n\r\n\tvar isKey = function isKey (keyCode) {\r\n\t\treturn function compareKeycodes (e) {\r\n\t\t\treturn e.keyCode === keyCode;\r\n\t\t};\r\n\t};\r\n\r\n\tvar isBackspaceKey = isKey(CONST.BACKSPACE_KEYCODE);\r\n\tvar isDeleteKey = isKey(CONST.DELETE_KEYCODE);\r\n\tvar isTabKey = isKey(CONST.TAB_KEYCODE);\r\n\tvar isUpArrow = isKey(CONST.UP_ARROW_KEYCODE);\r\n\tvar isDownArrow = isKey(CONST.DOWN_ARROW_KEYCODE);\r\n\r\n\tvar ENCODED_REGEX = /&[^\\s]*;/;\r\n\t/*\r\n\t * to prevent double encoding decodes content in loop until content is encoding free\r\n\t */\r\n\tvar cleanInput = function cleanInput (questionableMarkup) {\r\n\t\t// check for encoding and decode\r\n\t\twhile (ENCODED_REGEX.test(questionableMarkup)) {\r\n\t\t\tquestionableMarkup = $('<i>').html(questionableMarkup).text();\r\n\t\t}\r\n\r\n\t\t// string completely decoded now encode it\r\n\t\treturn $('<i>').text(questionableMarkup).html();\r\n\t};\r\n\r\n\tlangx.mixin(panels, {\r\n\t\tCONST: CONST,\r\n\t\tcleanInput: cleanInput,\r\n\t\tisBackspaceKey: isBackspaceKey,\r\n\t\tisDeleteKey: isDeleteKey,\r\n\t\tisShiftHeld: isShiftHeld,\r\n\t\tisTabKey: isTabKey,\r\n\t\tisUpArrow: isUpArrow,\r\n\t\tisDownArrow: isDownArrow\r\n\t});\r\n\r\n\treturn skylark.attach(\"domx.panels\",panels);\r\n\r\n});\r\n\ndefine('skylark-domx-panels/Panel',[\n    \"skylark-langx/langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-eventer\",\n    \"skylark-domx-query\",\n    \"skylark-domx-plugins\",\n    \"./panels\"\n], function(langx, browser, eventer,  $, plugins, panels) {\n\n\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Panel =  plugins.Plugin.inherit({\n    klassName: \"Panel\",\n\n    pluginName : \"domx.panels.panel\",\n\n    options : {\n      toggle: true\n    },\n\n    _construct : function(elm,options) {\n      ////options = langx.mixin({}, Collapse.DEFAULTS, $(element).data(), options)\n      this.overrided(elm,options);\n      this.$element      = this.$();\n      //this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + elm.id + '\"],' +\n      //                     '[data-toggle=\"collapse\"][data-target=\"#' + elm.id + '\"]')\n      this.transitioning = null\n\n      //if (this.options.parent) {\n      //  this.$parent = this.getParent()\n      //} else {\n      //  this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n      //}\n\n      if (this.options.toggle) {\n        this.toggle();\n      }\n    },\n\n    dimension : function () {\n      var hasWidth = this.$element.hasClass('width');\n      return hasWidth ? 'width' : 'height';\n    },\n\n    show : function () {\n      if (this.transitioning || this.$element.hasClass('in')) {\n        return;\n      }\n\n      //var activesData;\n      //var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n      //if (actives && actives.length) {\n      //  activesData = actives.data('collapse')\n      //  if (activesData && activesData.transitioning) return\n      //}\n\n      var startEvent = eventer.create('show.collapse');\n      this.$element.trigger(startEvent)\n      if (startEvent.isDefaultPrevented()) return\n\n      //if (actives && actives.length) {\n      //  //Plugin.call(actives, 'hide')\n      //  actives.plugin(\"domx.collapse\").hide();\n      //  activesData || actives.data('collapse', null)\n      //}\n\n      var dimension = this.dimension();\n\n      this.$element\n        .removeClass('collapse')\n        .addClass('collapsing')[dimension](0)\n        .attr('aria-expanded', true)\n\n      //this.$trigger\n      //  .removeClass('collapsed')\n      //  .attr('aria-expanded', true)\n\n      this.transitioning = 1\n\n      var complete = function () {\n        this.$element\n          .removeClass('collapsing')\n          .addClass('collapse in')[dimension]('')\n        this.transitioning = 0\n        this.$element\n          .trigger('shown.collapse')\n      }\n\n      if (!browser.support.transition) {\n        return complete.call(this);\n      }\n\n      var scrollSize = langx.camelCase(['scroll', dimension].join('-'));\n\n      this.$element\n        .one('transitionEnd', langx.proxy(complete, this))\n        .emulateTransitionEnd(Panel.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);\n    },\n\n    hide : function () {\n      if (this.transitioning || !this.$element.hasClass('in')) {\n        return ;\n      }\n\n      var startEvent = eventer.create('hide.collapse');\n      this.$element.trigger(startEvent);\n      if (startEvent.isDefaultPrevented()) {\n        return ;\n      } \n\n      var dimension = this.dimension();\n\n      this.$element[dimension](this.$element[dimension]())[0].offsetHeight;\n\n      this.$element\n        .addClass('collapsing')\n        .removeClass('collapse in')\n        .attr('aria-expanded', false);\n\n      //this.$trigger\n      //  .addClass('collapsed')\n      //  .attr('aria-expanded', false);\n\n      this.transitioning = 1;\n\n      var complete = function () {\n        this.transitioning = 0;\n        this.$element\n          .removeClass('collapsing')\n          .addClass('collapse')\n          .trigger('hidden.collapse');\n      }\n\n      if (!browser.support.transition) {\n        return complete.call(this);\n      }\n\n      this.$element\n        [dimension](0)\n        .one('transitionEnd', langx.proxy(complete, this))\n        .emulateTransitionEnd(Panel.TRANSITION_DURATION)\n    },\n\n    toggle : function () {\n      this[this.$element.hasClass('in') ? 'hide' : 'show']();\n    }\n\n    /*\n    getParent : function () {\n      return $(this.options.parent)\n        .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n        .each(langx.proxy(function (i, element) {\n          var $element = $(element)\n          this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n        }, this))\n        .end()\n    },\n\n    addAriaAndCollapsedClass : function ($element, $trigger) {\n      var isOpen = $element.hasClass('in');\n\n      $element.attr('aria-expanded', isOpen);\n      $trigger\n        .toggleClass('collapsed', !isOpen)\n        .attr('aria-expanded', isOpen);\n    }\n    */\n  });\n\n  Panel.TRANSITION_DURATION = 350;\n\n  /*\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(target)\n  }\n  */\n\n  plugins.register(Panel);\n\n  return panels.Panel = Panel;\n\n});\n\ndefine('skylark-domx-panels/HeaderPanel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./panels\",\r\n  \"./Panel\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,panels,Panel){\r\n\r\n  var HeaderPanel = plugins.Plugin.inherit({\r\n    klassName : \"HeaderPanel\",\r\n\r\n    pluginName : \"domx.pandels.headerPanel\",\r\n\r\n    options : {\r\n      toggler : {\r\n        selector : \".panel-heading [data-toggle=\\\"collapse\\\"]\"\r\n      },\r\n\r\n      body : {\r\n        selector : \".panel-collapse\"\r\n      }\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      this._velm = this.elmx();\r\n      this._expanded = false;\r\n      this.$toggle = this._velm.find(this.options.toggler.selector);\r\n      this.$body = this._velm.find(this.options.body.selector);\r\n      this.$toggle.on('click.panel',(e) => {\r\n        this.toggle();\r\n      });\r\n\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      this.emit(\"expanding\");\r\n      this.$body.plugin(Panel.prototype.pluginName).show();\r\n      this._expanded = true;\r\n      this.emit(\"expanded\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      this.emit(\"collapsing\");\r\n      this.$body.plugin(Panel.prototype.pluginName).hide();\r\n      this._expanded = false;\r\n      this.emit(\"collapsed\");\r\n    },\r\n\r\n    toggle : function() {\r\n      // toggle this panel\r\n      if (this._expanded) {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n    },\r\n\r\n    full : function() {\r\n\r\n    },\r\n\r\n    unfull : function() {\r\n\r\n    },\r\n\r\n    toogleFull : function() {\r\n\r\n    },\r\n    \r\n    close: function () {\r\n    }\r\n\r\n\r\n  });\r\n\r\n  plugins.register(HeaderPanel);\r\n\r\n  return HeaderPanel;\r\n\r\n});\ndefine('skylark-domx-panels/Pagination',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./panels\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,panels){\r\n\r\n  'use strict';\r\n\r\n  var Pagination = plugins.Plugin.inherit({\r\n      klassName : \"Pagination\",\r\n\r\n      pluginName : \"domx.panels.pagination\",\r\n\r\n      options : {\r\n          tagName : \"ul\",\r\n          css : \"\",\r\n          selectors : {\r\n              firstNavi : \"li[aria-label='first']\",\r\n              prevNavi : \"li[aria-label='prev']\",\r\n              nextNavi : \"li[aria-label='next']\",\r\n              lastNavi : \"li[aria-label='last']\",\r\n              numericNavi : \"li:not([aria-label])\",\r\n              numericTxt  : \"a\"\r\n          },\r\n          totalPages: 7,\r\n          maxButtonsVisible: 5,\r\n          currentPage: 1     \r\n      },\r\n\r\n      state : {\r\n          totalPages : Number,\r\n          currentPage : Number\r\n      },\r\n\r\n      _construct : function(elm,options) {\r\n        this.overrided(elm,options);\r\n        this._velm = this.elmx();\r\n\r\n        this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n        this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n        this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n        this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n        this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n        var self = this;\r\n\r\n        function checkCanAction(elm) {\r\n          var $elm = $(elm);\r\n          if ($elm.is(\".disabled,.active\")) {\r\n            return false;\r\n          } else {\r\n            return $elm;\r\n          }\r\n        }\r\n\r\n        this.$first.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(1);\r\n        });\r\n\r\n        this.$prev.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.currentPage()-1);\r\n        });\r\n\r\n        this.$last.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.totalPages());\r\n        });\r\n\r\n        this.$next.click(function(){\r\n          if (!checkCanAction(this)) {\r\n            return;\r\n          }\r\n          self.currentPage(self.currentPage()+1);\r\n        });\r\n\r\n        this.$numeric.click(function(){\r\n          var ret = checkCanAction(this)\r\n          if (!ret) {\r\n            return;\r\n          }\r\n          var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n              pageNo = parseInt(numeric);\r\n          self.currentPage(pageNo);\r\n\r\n        });\r\n\r\n        this._currentPage = this.options.currentPage;\r\n        this._totalPages = this.options.totalPages;\r\n\r\n        this._refresh({\r\n          currentPage : true,\r\n          totalPages : true\r\n        });\r\n      },\r\n\r\n      _refresh: function (updates) {\r\n        var self = this;\r\n\r\n        function changePageNoBtns(currentPage,totalPages) {\r\n\r\n          // Create the numeric buttons.\r\n          // Variable of number control in the buttons.\r\n          var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n          var begin = 1;\r\n          var end = begin + totalPageNoBtns - 1;\r\n\r\n          /*\r\n           * Align the values in the begin and end variables if the user has the\r\n           * possibility that select a page that doens't appear in the paginador.\r\n           * e.g currentPage = 1, and user go to the 20 page.\r\n           */\r\n          while ((currentPage < begin) || (currentPage > end)) {\r\n            if (currentPage > end) {\r\n               begin += totalPageNoBtns;\r\n               end += totalPageNoBtns;\r\n\r\n               if (end > totalPages) {\r\n                 begin = begin - (end - totalPages);\r\n                 end = totalPages;\r\n               }\r\n             } else {\r\n               begin -= totalPageNoBtns;\r\n               end -= totalPageNoBtns;\r\n\r\n               if (begin < 0) {\r\n                 end = end + (begin + totalPageNoBtns);\r\n                 begin = 1;\r\n               }\r\n             }\r\n          }\r\n         /*\r\n          * Verify if the user clicks in the last page show by paginator.\r\n          * If yes, the paginator advances.\r\n          */\r\n          if ((currentPage === end) && (totalPages != 1)) {\r\n            begin = currentPage - 1;\r\n            end = begin + totalPageNoBtns - 1;\r\n\r\n            if (end >= totalPages) {\r\n              begin = begin - (end - (totalPages));\r\n              end = totalPages;\r\n            }\r\n          }\r\n\r\n          /*\r\n           * Verify it the user clicks in the first page show by paginator.\r\n           * If yes, the paginator retrogress\r\n           */\r\n           if ((begin === currentPage) && (totalPages != 1)) {\r\n             if (currentPage != 1) {\r\n               end = currentPage + 1;\r\n               begin = end - (totalPageNoBtns - 1);\r\n             }\r\n           }\r\n\r\n           var count = self.$numeric.size(),\r\n               visibles = end-begin + 1,\r\n               i = 0;\r\n\r\n           self.$numeric.filter(\".active\").removeClass(\"active\");\r\n           while (i<visibles) {\r\n             var pageNo = i + begin,\r\n                 $btn = self.$numeric.eq(i);\r\n             $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n             if (pageNo == currentPage) {\r\n              $btn.addClass(\"active\");\r\n             }\r\n             i++;\r\n           }\r\n           while (i<count) {\r\n             self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n             i++;\r\n           }\r\n\r\n\r\n        }\r\n\r\n        function changeLabeldBtns(currentPage,totalPages) {\r\n          if (currentPage < 1) {\r\n            throw('Page can\\'t be less than 1');\r\n          } else if (currentPage > totalPages) {\r\n            throw('Page is bigger than total pages');\r\n          }\r\n\r\n          if (totalPages < 1) {\r\n            throw('Total Pages can\\'t be less than 1');\r\n          }\r\n\r\n          if (currentPage == 1 ) {\r\n            self.$first.addClass(\"disabled\");\r\n            self.$prev.addClass(\"disabled\");\r\n          } else {\r\n            self.$first.removeClass(\"disabled\");\r\n            self.$prev.removeClass(\"disabled\");\r\n          }\r\n\r\n          if (currentPage == totalPages ) {\r\n            self.$last.addClass(\"disabled\");\r\n            self.$next.addClass(\"disabled\");\r\n          } else {\r\n            self.$last.removeClass(\"disabled\");\r\n            self.$next.removeClass(\"disabled\");\r\n          }\r\n        }\r\n\r\n        if (updates.currentPage || updates.totalPages) {\r\n          var currentPage = self.currentPage(),\r\n              totalPages = self.totalPages();\r\n\r\n          changePageNoBtns(currentPage,totalPages);\r\n          changeLabeldBtns(currentPage,totalPages);\r\n        }\r\n\r\n      },\r\n\r\n      currentPage : function(v) {\r\n        if (v !== undefined) {\r\n          this._currentPage = v;\r\n          this._refresh({\r\n            currentPage : true\r\n          });            \r\n          return this;\r\n        } else {\r\n          return this._currentPage;\r\n        }\r\n      },\r\n\r\n      totalPages : function(v) {\r\n        if (v !== undefined) {\r\n          this._totalPages = v;\r\n          this._refresh({\r\n            totalPages : true\r\n          });\r\n          return this;\r\n        } else {\r\n          return this._totalPages;\r\n        }\r\n      }\r\n  });\r\n\r\n  plugins.register(Pagination);\r\n\r\n\r\n  return panels.Pagination = Pagination;\r\n});\n define('skylark-domx-panels/PanelGroup',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"./panels\",\r\n  \"./HeaderPanel\"\r\n],function(langx,$,elmx,plugins,panels,HeaderPanel){\r\n\r\n  var PanelGroup = plugins.Plugin.inherit({\r\n    klassName : \"PanelGroup\",\r\n\r\n    pluginName : \"domx.panels.panelGroup\",\r\n\r\n    options : {\r\n      panel: {\r\n        selector : \"> .panel\",\r\n        template : null,\r\n      }\r\n    },\r\n\r\n     _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      this._velm = this.elmx();\r\n      var panels = [];\r\n      this._velm.$(this.options.panel.selector).forEach((panelEl) => {\r\n        var panel = new PanelGroup.Panel(panelEl,{\r\n          group : this\r\n        });\r\n        panels.push(panel);\r\n      });\r\n      this._panels = panels;\r\n    },\r\n\r\n    panels : {\r\n      get : function() {\r\n\r\n      }\r\n    },\r\n\r\n\r\n    addPanel : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Removes a group pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    remove : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands a group pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expand : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands all group panes.\r\n     *\r\n     * @method expandAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expandAll : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapse a group pane.\r\n     *\r\n     * @method collapse\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapse : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapses all group pane.\r\n     *\r\n     * @method collapseAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapseAll : function() {\r\n\r\n    }\r\n  });\r\n\r\n  PanelGroup.Panel = HeaderPanel.inherit({\r\n    klassName : \"AccordionPanel\",\r\n\r\n    expand : function() {\r\n      if (this.options.group.active) {\r\n        this.options.group.active.collapse();\r\n      }\r\n      this.overrided();\r\n      this.options.group.active = this;\r\n    },\r\n\r\n    collapse : function() {\r\n      this.overrided();\r\n      this.options.group.active = null;\r\n    },\r\n\r\n    toggle : function() {\r\n      this.overrided();\r\n    },\r\n\r\n    remove : function() {\r\n      this.overrided();\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(PanelGroup);\r\n\r\n  return panels.PanelGroup = PanelGroup;\r\n});\r\n\ndefine('skylark-domx-panels/TabStrip',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups/Dropdown\",\r\n    \"skylark-domx-toggles/TabButton\",\r\n    \"./panels\",\r\n], function(langx, browser, eventer, noder, geom,  $, plugins,Dropdown, TabButton,panels) {\r\n\r\n    var TabStrip = plugins.Plugin.inherit({\r\n        klassName : \"TabStrip\",\r\n        pluginName : \"domx.panels.tabstrip\",\r\n\r\n        options : {\r\n          selectors : {\r\n            header : \".nav-tabs\",\r\n            tab : \"[data-toggle=\\\"tab\\\"]\",\r\n            content : \".tab-content\",\r\n            tabpane : \".tab-pane\"\r\n          },\r\n\r\n          droptabs : {\r\n            selectors : {\r\n              dropdown : \"li.droptabs\",\r\n              dropdownMenu    : \"ul.dropdown-menu\",\r\n              dropdownTabs    : \"li\",\r\n              dropdownCaret   : \"b.caret\",\r\n              visibleTabs     : \">li:not(.dropdown)\",\r\n            },\r\n            auto              : true,\r\n            pullDropdownRight : true,\r\n\r\n\r\n          }\r\n        },\r\n\r\n     _construct : function(elm,options) {\r\n          this.overrided(elm,options);\r\n          this._velm = this.elmx();\r\n          this.$header = this._velm.$(this.options.selectors.header); \r\n          this.$tabs = this.$header.find(this.options.selectors.tab);\r\n          this.$content = this._velm.$(this.options.selectors.content);\r\n          this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\r\n\r\n          this.$header.find('[data-toggle=\"dropdown\"]').plugin(Dropdown.prototype.pluginName);\r\n\r\n          var self = this;\r\n          this.$tabs.each(function(idx,tabEl){\r\n            $(tabEl).plugin(TabButton.prototype.pluginName, {\r\n              target : self.$tabpanes[idx]\r\n            });\r\n          });\r\n\r\n        },\r\n\r\n        arrange : function () {\r\n\r\n          var dropdownTabsSelector = this.options.droptabs.selectors.dropdownTabs,\r\n              visibleTabsSelector = this.options.droptabs.selectors.visibleTabs;\r\n\r\n              $container = this.$header;\r\n          var dropdown = $container.find(this.options.droptabs.selectors.dropdown);\r\n          var dropdownMenu = dropdown.find(this.options.droptabs.selectors.dropdownMenu);\r\n          var dropdownLabel = $('>a', dropdown).clone();\r\n          var dropdownCaret = $(this.options.droptabs.selectors.dropdownCaret, dropdown);\r\n\r\n          // We only want the default label, strip the caret out\r\n          $(this.options.droptabs.selectors.dropdownCaret, dropdownLabel).remove();\r\n\r\n          if (this.options.droptabs.pullDropdownRight) {\r\n            $(dropdown).addClass('pull-right');\r\n          }\r\n\r\n          var $dropdownTabs = function () {\r\n            return $(dropdownTabsSelector, dropdownMenu);\r\n          }\r\n\r\n          var $visibleTabs = function () {\r\n            return $(visibleTabsSelector, $container);\r\n          }\r\n\r\n          function getFirstHiddenElementWidth() {\r\n            var tempElem=$dropdownTabs().first().clone().appendTo($container).css(\"position\",\"fixed\");\r\n            var hiddenElementWidth = $(tempElem).outerWidth();\r\n            $(tempElem).remove();\r\n            return hiddenElementWidth;\r\n          }\r\n\r\n          function getHiddenElementWidth(elem) {\r\n            var tempElem=$(elem).clone().appendTo($container).css(\"position\",\"fixed\");\r\n            var hiddenElementWidth = $(tempElem).outerWidth();\r\n            $(tempElem).remove();\r\n            return hiddenElementWidth;\r\n          }\r\n\r\n          function getDropdownLabel() {\r\n            var labelText = 'Dropdown';\r\n            if ($(dropdown).hasClass('active')) {\r\n              labelText = $('>li.active>a', dropdownMenu).html();\r\n            } else if (dropdownLabel.html().length > 0) {\r\n              labelText = dropdownLabel.html();\r\n            }\r\n\r\n            labelText = $.trim(labelText);\r\n\r\n            if (labelText.length > 10) {\r\n              labelText = labelText.substring(0, 10) + '...';\r\n            }\r\n\r\n            return labelText;\r\n          }\r\n\r\n          function renderDropdownLabel() {\r\n            $('>a', dropdown).html(getDropdownLabel() + ' ' + dropdownCaret.prop('outerHTML'));\r\n          }\r\n\r\n          function manageActive(elem) {\r\n            //fixes a bug where Bootstrap can't remove the 'active' class on elements after they've been hidden inside the dropdown\r\n            $('a', $(elem)).on('show.bs.tab', function (e) {\r\n              $(e.relatedTarget).parent().removeClass('active');\r\n            })\r\n            $('a', $(elem)).on('shown.bs.tab', function (e) {\r\n              renderDropdownLabel();\r\n            })\r\n\r\n          }\r\n\r\n          function checkDropdownSelection() {\r\n            if ($($dropdownTabs()).filter('.active').length > 0) {\r\n              $(dropdown).addClass('active');\r\n            } else {\r\n              $(dropdown).removeClass('active');\r\n            }\r\n\r\n            renderDropdownLabel();\r\n          }\r\n\r\n\r\n          var visibleTabsWidth = function () {\r\n            var visibleTabsWidth = 0;\r\n            $($visibleTabs()).each(function( index ) {\r\n              visibleTabsWidth += parseInt($(this).outerWidth(), 10);\r\n            });\r\n            visibleTabsWidth = visibleTabsWidth + parseInt($(dropdown).outerWidth(), 10);\r\n            return visibleTabsWidth;\r\n          }\r\n\r\n          var availableSpace = function () {\r\n            return $container.outerWidth()-visibleTabsWidth();\r\n          }\r\n\r\n          if (availableSpace()<0) {//we will hide tabs here\r\n            var x = availableSpace();\r\n            $($visibleTabs().get().reverse()).each(function( index ){\r\n              if (!($(this).hasClass('always-visible'))){\r\n                  $(this).prependTo(dropdownMenu);\r\n                  x=x+$(this).outerWidth();\r\n              }\r\n              if (x>=0) {return false;}\r\n            });\r\n          }\r\n\r\n          if (availableSpace()>getFirstHiddenElementWidth()) { //and here we bring the tabs out\r\n            var x = availableSpace();\r\n            $($dropdownTabs()).each(function( index ){\r\n              if (getHiddenElementWidth(this) < x && !($(this).hasClass('always-dropdown'))){\r\n                $(this).appendTo($container);\r\n                x = x-$(this).outerWidth();\r\n              } else {return false;}\r\n             });\r\n\r\n            if (!this.options.droptabs.pullDropdownRight && !$(dropdown).is(':last-child')) {\r\n              // If not pulling-right, keep the dropdown at the end of the container.\r\n              $(dropdown).detach().insertAfter($container.find('li:last-child'));\r\n            }\r\n          }\r\n\r\n          if ($dropdownTabs().length <= 0) {\r\n            dropdown.hide();\r\n          } else {\r\n            dropdown.show();\r\n          }\r\n        },\r\n\r\n        add : function() {\r\n          //TODO\r\n        },\r\n\r\n        remove : function(){\r\n          //TODO\r\n        }\r\n    });\r\n\r\n    plugins.register(TabStrip);\r\n\r\n\r\n    return panels.TabStrip = TabStrip;\r\n\r\n});\ndefine('skylark-domx-panels/Wizard',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./panels\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,panels){\r\n\r\n\r\n\tvar Wizard = plugins.Plugin.inherit({\r\n\t\tklassName: \"Wizard\",\r\n\r\n\t    pluginName : \"domx.panels.wizard\",\r\n\r\n\t    options : {\r\n\t\t\tdisablePreviousStep: false,\r\n\t\t\tselectedItem: {\r\n\t\t\t\tstep: -1\r\n\t\t\t}//-1 means it will attempt to look for \"active\" class in order to set the step\r\n\t    },\r\n\r\n\t    _construct : function(elm,options) {\r\n\t\t    this.overrided(elm,options);\r\n\r\n\t\t\tthis.$element = this.$();\r\n\t\t\tthis.options.disablePreviousStep = (this.$element.attr('data-restrict') === 'previous') ? true : this.options.disablePreviousStep;\r\n\t\t\tthis.currentStep = this.options.selectedItem.step;\r\n\t\t\tthis.numSteps = this.$element.find('.steps li').length;\r\n\t\t\tthis.$prevBtn = this.$element.find('button.btn-prev');\r\n\t\t\tthis.$nextBtn = this.$element.find('button.btn-next');\r\n\r\n\t\t\tvar kids = this.$nextBtn.children().detach();\r\n\t\t\tthis.nextText = langx.trim(this.$nextBtn.text());\r\n\t\t\tthis.$nextBtn.append(kids);\r\n\r\n\t\t\tvar steps = this.$element.children('.steps-container');\r\n\t\t\t// maintains backwards compatibility with < 3.8, will be removed in the future\r\n\t\t\tif (steps.length === 0) {\r\n\t\t\t\tsteps = this.$element;\r\n\t\t\t\tthis.$element.addClass('no-steps-container');\r\n\t\t\t\tif (window && window.console && window.console.warn) {\r\n\t\t\t\t\twindow.console.warn('please update your wizard markup to include \".steps-container\" as seen in http://getfuelux.com/javascript.html#wizard-usage-markup');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsteps = steps.find('.steps');\r\n\r\n\t\t\t// handle events\r\n\t\t\tthis.$prevBtn.on('click.fu.wizard', langx.proxy(this.previous, this));\r\n\t\t\tthis.$nextBtn.on('click.fu.wizard', langx.proxy(this.next, this));\r\n\t\t\tsteps.on('click.fu.wizard', 'li.complete', langx.proxy(this.stepclicked, this));\r\n\r\n\t\t\tthis.selectedItem(this.options.selectedItem);\r\n\r\n\t\t\tif (this.options.disablePreviousStep) {\r\n\t\t\t\tthis.$prevBtn.attr('disabled', true);\r\n\t\t\t\tthis.$element.find('.steps').addClass('previous-disabled');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function () {\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// any external bindings [none]\r\n\t\t\t// empty elements to return to original markup [none]\r\n\t\t\t// returns string of markup\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\t//index is 1 based\r\n\t\t//second parameter can be array of objects [{ ... }, { ... }] or you can pass n additional objects as args\r\n\t\t//object structure is as follows (all params are optional): { badge: '', label: '', pane: '' }\r\n\t\taddSteps: function (index) {\r\n\t\t\tvar items = [].slice.call(arguments).slice(1);\r\n\t\t\tvar $steps = this.$element.find('.steps');\r\n\t\t\tvar $stepContent = this.$element.find('.step-content');\r\n\t\t\tvar i, l, $pane, $startPane, $startStep, $step;\r\n\r\n\t\t\tindex = (index === -1 || (index > (this.numSteps + 1))) ? this.numSteps + 1 : index;\r\n\t\t\tif (items[0] instanceof Array) {\r\n\t\t\t\titems = items[0];\r\n\t\t\t}\r\n\r\n\t\t\t$startStep = $steps.find('li:nth-child(' + index + ')');\r\n\t\t\t$startPane = $stepContent.find('.step-pane:nth-child(' + index + ')');\r\n\t\t\tif ($startStep.length < 1) {\r\n\t\t\t\t$startStep = null;\r\n\t\t\t}\r\n\r\n\t\t\tfor (i = 0, l = items.length; i < l; i++) {\r\n\t\t\t\t$step = $('<li data-step=\"' + index + '\"><span class=\"badge badge-info\"></span></li>');\r\n\t\t\t\t$step.append(items[i].label || '').append('<span class=\"chevron\"></span>');\r\n\t\t\t\t$step.find('.badge').append(items[i].badge || index);\r\n\r\n\t\t\t\t$pane = $('<div class=\"step-pane\" data-step=\"' + index + '\"></div>');\r\n\t\t\t\t$pane.append(items[i].pane || '');\r\n\r\n\t\t\t\tif (!$startStep) {\r\n\t\t\t\t\t$steps.append($step);\r\n\t\t\t\t\t$stepContent.append($pane);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$startStep.before($step);\r\n\t\t\t\t\t$startPane.before($pane);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\t\t\tthis.syncSteps();\r\n\t\t\tthis.numSteps = $steps.find('li').length;\r\n\t\t\tthis.setState();\r\n\t\t},\r\n\r\n\t\t//index is 1 based, howMany is number to remove\r\n\t\tremoveSteps: function (index, howMany) {\r\n\t\t\tvar action = 'nextAll';\r\n\t\t\tvar i = 0;\r\n\t\t\tvar $steps = this.$element.find('.steps');\r\n\t\t\tvar $stepContent = this.$element.find('.step-content');\r\n\t\t\tvar $start;\r\n\r\n\t\t\thowMany = (howMany !== undefined) ? howMany : 1;\r\n\r\n\t\t\tif (index > $steps.find('li').length) {\r\n\t\t\t\t$start = $steps.find('li:last');\r\n\t\t\t} else {\r\n\t\t\t\t$start = $steps.find('li:nth-child(' + index + ')').prev();\r\n\t\t\t\tif ($start.length < 1) {\r\n\t\t\t\t\taction = 'children';\r\n\t\t\t\t\t$start = $steps;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t$start[action]().each(function () {\r\n\t\t\t\tvar item = $(this);\r\n\t\t\t\tvar step = item.attr('data-step');\r\n\t\t\t\tif (i < howMany) {\r\n\t\t\t\t\titem.remove();\r\n\t\t\t\t\t$stepContent.find('.step-pane[data-step=\"' + step + '\"]:first').remove();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\r\n\t\t\tthis.syncSteps();\r\n\t\t\tthis.numSteps = $steps.find('li').length;\r\n\t\t\tthis.setState();\r\n\t\t},\r\n\r\n\t\tsetState: function () {\r\n\t\t\tvar canMovePrev = (this.currentStep > 1);//remember, steps index is 1 based...\r\n\t\t\tvar isFirstStep = (this.currentStep === 1);\r\n\t\t\tvar isLastStep = (this.currentStep === this.numSteps);\r\n\r\n\t\t\t// disable buttons based on current step\r\n\t\t\tif (!this.options.disablePreviousStep) {\r\n\t\t\t\tthis.$prevBtn.attr('disabled', (isFirstStep === true || canMovePrev === false));\r\n\t\t\t}\r\n\r\n\t\t\t// change button text of last step, if specified\r\n\t\t\tvar last = this.$nextBtn.attr('data-last');\r\n\t\t\tif (last) {\r\n\t\t\t\tthis.lastText = last;\r\n\t\t\t\t// replace text\r\n\t\t\t\tvar text = this.nextText;\r\n\t\t\t\tif (isLastStep === true) {\r\n\t\t\t\t\ttext = this.lastText;\r\n\t\t\t\t\t// add status class to wizard\r\n\t\t\t\t\tthis.$element.addClass('complete');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$element.removeClass('complete');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar kids = this.$nextBtn.children().detach();\r\n\t\t\t\tthis.$nextBtn.text(text).append(kids);\r\n\t\t\t}\r\n\r\n\t\t\t// reset classes for all steps\r\n\t\t\tvar $steps = this.$element.find('.steps li');\r\n\t\t\t$steps.removeClass('active').removeClass('complete');\r\n\t\t\t$steps.find('span.badge').removeClass('badge-info').removeClass('badge-success');\r\n\r\n\t\t\t// set class for all previous steps\r\n\t\t\tvar prevSelector = '.steps li:lt(' + (this.currentStep - 1) + ')';\r\n\t\t\tvar $prevSteps = this.$element.find(prevSelector);\r\n\t\t\t$prevSteps.addClass('complete');\r\n\t\t\t$prevSteps.find('span.badge').addClass('badge-success');\r\n\r\n\t\t\t// set class for current step\r\n\t\t\tvar currentSelector = '.steps li:eq(' + (this.currentStep - 1) + ')';\r\n\t\t\tvar $currentStep = this.$element.find(currentSelector);\r\n\t\t\t$currentStep.addClass('active');\r\n\t\t\t$currentStep.find('span.badge').addClass('badge-info');\r\n\r\n\t\t\t// set display of target element\r\n\t\t\tvar $stepContent = this.$element.find('.step-content');\r\n\t\t\tvar target = $currentStep.attr('data-step');\r\n\t\t\t$stepContent.find('.step-pane').removeClass('active');\r\n\t\t\t$stepContent.find('.step-pane[data-step=\"' + target + '\"]:first').addClass('active');\r\n\r\n\t\t\t// reset the wizard position to the left\r\n\t\t\tthis.$element.find('.steps').first().attr('style', 'margin-left: 0');\r\n\r\n\t\t\t// check if the steps are wider than the container div\r\n\t\t\tvar totalWidth = 0;\r\n\t\t\tthis.$element.find('.steps > li').each(function () {\r\n\t\t\t\ttotalWidth += $(this).outerWidth();\r\n\t\t\t});\r\n\t\t\tvar containerWidth = 0;\r\n\t\t\tif (this.$element.find('.actions').length) {\r\n\t\t\t\tcontainerWidth = this.$element.width() - this.$element.find('.actions').first().outerWidth();\r\n\t\t\t} else {\r\n\t\t\t\tcontainerWidth = this.$element.width();\r\n\t\t\t}\r\n\r\n\t\t\tif (totalWidth > containerWidth) {\r\n\t\t\t\t// set the position so that the last step is on the right\r\n\t\t\t\tvar newMargin = totalWidth - containerWidth;\r\n\t\t\t\tthis.$element.find('.steps').first().attr('style', 'margin-left: -' + newMargin + 'px');\r\n\r\n\t\t\t\t// set the position so that the active step is in a good\r\n\t\t\t\t// position if it has been moved out of view\r\n\t\t\t\tif (this.$element.find('li.active').first().position().left < 200) {\r\n\t\t\t\t\tnewMargin += this.$element.find('li.active').first().position().left - 200;\r\n\t\t\t\t\tif (newMargin < 1) {\r\n\t\t\t\t\t\tthis.$element.find('.steps').first().attr('style', 'margin-left: 0');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.$element.find('.steps').first().attr('style', 'margin-left: -' + newMargin + 'px');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only fire changed event after initializing\r\n\t\t\tif (typeof (this.initialized) !== 'undefined') {\r\n\t\t\t\tvar e = eventer.create('changed.fu.wizard');\r\n\t\t\t\tthis.$element.trigger(e, {\r\n\t\t\t\t\tstep: this.currentStep\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.initialized = true;\r\n\t\t},\r\n\r\n\t\tstepclicked: function (e) {\r\n\t\t\tvar li = $(e.currentTarget);\r\n\t\t\tvar index = this.$element.find('.steps li').index(li);\r\n\r\n\t\t\tif (index < this.currentStep && this.options.disablePreviousStep) {//enforce restrictions\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tvar evt = eventer.create('stepclicked.fu.wizard');\r\n\t\t\t\tthis.$element.trigger(evt, {\r\n\t\t\t\t\tstep: index + 1\r\n\t\t\t\t});\r\n\t\t\t\tif (evt.isDefaultPrevented()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentStep = (index + 1);\r\n\t\t\t\tthis.setState();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsyncSteps: function () {\r\n\t\t\tvar i = 1;\r\n\t\t\tvar $steps = this.$element.find('.steps');\r\n\t\t\tvar $stepContent = this.$element.find('.step-content');\r\n\r\n\t\t\t$steps.children().each(function () {\r\n\t\t\t\tvar item = $(this);\r\n\t\t\t\tvar badge = item.find('.badge');\r\n\t\t\t\tvar step = item.attr('data-step');\r\n\r\n\t\t\t\tif (!isNaN(parseInt(badge.html(), 10))) {\r\n\t\t\t\t\tbadge.html(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\titem.attr('data-step', i);\r\n\t\t\t\t$stepContent.find('.step-pane[data-step=\"' + step + '\"]:last').attr('data-step', i);\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tprevious: function () {\r\n\t\t\tif (this.options.disablePreviousStep || this.currentStep === 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar e = eventer.create('actionclicked.fu.wizard');\r\n\t\t\tthis.$element.trigger(e, {\r\n\t\t\t\tstep: this.currentStep,\r\n\t\t\t\tdirection: 'previous'\r\n\t\t\t});\r\n\t\t\tif (e.isDefaultPrevented()) {\r\n\t\t\t\treturn;\r\n\t\t\t}// don't increment ...what? Why?\r\n\r\n\t\t\tthis.currentStep -= 1;\r\n\t\t\tthis.setState();\r\n\r\n\t\t\t// only set focus if focus is still on the $nextBtn (avoid stomping on a focus set programmatically in actionclicked callback)\r\n\t\t\tif (this.$prevBtn.is(':focus')) {\r\n\t\t\t\tvar firstFormField = this.$element.find('.active').find('input, select, textarea')[0];\r\n\r\n\t\t\t\tif (typeof firstFormField !== 'undefined') {\r\n\t\t\t\t\t// allow user to start typing immediately instead of having to click on the form field.\r\n\t\t\t\t\t$(firstFormField).focus();\r\n\t\t\t\t} else if (this.$element.find('.active input:first').length === 0 && this.$prevBtn.is(':disabled')) {\r\n\t\t\t\t\t//only set focus on a button as the last resort if no form fields exist and the just clicked button is now disabled\r\n\t\t\t\t\tthis.$nextBtn.focus();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tnext: function () {\r\n\t\t\tvar e = eventer.create('actionclicked.fu.wizard');\r\n\t\t\tthis.$element.trigger(e, {\r\n\t\t\t\tstep: this.currentStep,\r\n\t\t\t\tdirection: 'next'\r\n\t\t\t});\r\n\t\t\tif (e.isDefaultPrevented()) {\r\n\t\t\t\treturn;\r\n\t\t\t}// respect preventDefault in case dev has attached validation to step and wants to stop propagation based on it.\r\n\r\n\t\t\tif (this.currentStep < this.numSteps) {\r\n\t\t\t\tthis.currentStep += 1;\r\n\t\t\t\tthis.setState();\r\n\t\t\t} else {//is last step\r\n\t\t\t\tthis.$element.trigger('finished.fu.wizard');\r\n\t\t\t}\r\n\r\n\t\t\t// only set focus if focus is still on the $nextBtn (avoid stomping on a focus set programmatically in actionclicked callback)\r\n\t\t\tif (this.$nextBtn.is(':focus')) {\r\n\t\t\t\tvar firstFormField = this.$element.find('.active').find('input, select, textarea')[0];\r\n\r\n\t\t\t\tif (typeof firstFormField !== 'undefined') {\r\n\t\t\t\t\t// allow user to start typing immediately instead of having to click on the form field.\r\n\t\t\t\t\t$(firstFormField).focus();\r\n\t\t\t\t} else if (this.$element.find('.active input:first').length === 0 && this.$nextBtn.is(':disabled')) {\r\n\t\t\t\t\t//only set focus on a button as the last resort if no form fields exist and the just clicked button is now disabled\r\n\t\t\t\t\tthis.$prevBtn.focus();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectedItem: function (selectedItem) {\r\n\t\t\tvar retVal, step;\r\n\r\n\t\t\tif (selectedItem) {\r\n\t\t\t\tstep = selectedItem.step || -1;\r\n\t\t\t\t//allow selection of step by data-name\r\n\t\t\t\tstep = Number(this.$element.find('.steps li[data-name=\"' + step + '\"]').first().attr('data-step')) || Number(step);\r\n\r\n\t\t\t\tif (1 <= step && step <= this.numSteps) {\r\n\t\t\t\t\tthis.currentStep = step;\r\n\t\t\t\t\tthis.setState();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstep = this.$element.find('.steps li.active:first').attr('data-step');\r\n\t\t\t\t\tif (!isNaN(step)) {\r\n\t\t\t\t\t\tthis.currentStep = parseInt(step, 10);\r\n\t\t\t\t\t\tthis.setState();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tretVal = this;\r\n\t\t\t} else {\r\n\t\t\t\tretVal = {\r\n\t\t\t\t\tstep: this.currentStep\r\n\t\t\t\t};\r\n\t\t\t\tif (this.$element.find('.steps li.active:first[data-name]').length) {\r\n\t\t\t\t\tretVal.stepname = this.$element.find('.steps li.active:first').attr('data-name');\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t});\r\n\r\n   plugins.register(Wizard);\r\n\r\n\treturn panels.Wizard = Wizard;\r\n\r\n});\r\n\ndefine('skylark-domx-panels/main',[\r\n    \"./panels\",\r\n    \"./HeaderPanel\",\r\n    \"./Pagination\",\r\n    \"./Panel\",\r\n    \"./PanelGroup\",\r\n    \"./TabStrip\",\r\n    \"./Wizard\"\r\n], function(panels) {\r\n    return panels;\r\n});\ndefine('skylark-domx-panels', ['skylark-domx-panels/main'], function (main) { return main; });\n\n"]}